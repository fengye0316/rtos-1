// 
//	Priority Queue for Task Descriptor Block
//
class	PriQueue {

    private:
	UBYTE	priorityMaskFirst;
	UBYTE	priorityMaskSecond[4];
	UBYTE	priorityMaskThird[4][BITS];
	.
	.
	.

};

inline void	PriQueue::setPriorityMask(int _priority) {

    register int p1, p2, p3;
    register int p;

    p = priChange(_priority);

    //GET_MASK_INDEX(_priority, p1, p2, p3);
    p1 = ((p>>(POWER*2)) & 0x07);
    p2 = ((p>>(POWER*1)) & 0x07);	
    p3 = ((p>>(POWER*0)) & 0x07);

    priorityMaskFirst 		|= BITIZE(p1);
    priorityMaskSecond[p1] 	|= BITIZE(p2);
    priorityMaskThird[p1][p2] 	|= BITIZE(p3);
}

inline void	PriQueue::clearPriorityMask(int _priority) {
    register int p1, p2, p3;
    register int p;

    p = priChange(_priority);

    //GET_MASK_INDEX(_priority, p1, p2, p3);
    p1 = ((p>>(POWER*2)) & 0x07);
    p2 = ((p>>(POWER*1)) & 0x07);	
    p3 = ((p>>(POWER*0)) & 0x07);

    priorityMaskThird[p1][p2] &= ~BITIZE(p3);
    if (priorityMaskThird[p1][p2] == 0) {
	priorityMaskSecond[p1] &= ~BITIZE(p2);
	if(priorityMaskSecond[p1] == 0) {
	    priorityMaskFirst &= ~BITIZE(p1);
	} // inner if
    } // outter if
}

// 
//	get highest priority 
//	by bit mapping
//
// 	can be changed into inline
//
inline int	PriQueue::getHighestPriority( void ) {
    register int p1, p2, p3;
    register int priority;

    p1 = priorityMap[priorityMaskFirst];
    p2 = priorityMap[priorityMaskSecond[p1]];
    p3 = priorityMap[priorityMaskThird[p1][p2]];

    priority = ( p1 << ( POWER * 2 ) ) + ( p2 << ( POWER * 1 ) ) + p3;
    return priChange(priority);
}



#define	POWER	3	// 2^3 = 8; 2^POWER = BITS 
#define BITIZE(p)	((0x01 << (p)))

// use this for 0 is lowest priority case
// XXX this going to be changed little bit for pri converting
// XXX like LowestPriority is ???

#define PRI_CHANGE(p)	(LowestPriority - p)
inline int priChange(int p) { return (LowestPriority - p);}




//
// 	fast search highest priority 
//
const UBYTE priorityMap[] = {
 /* 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15  */
    0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3,	// 16 * 0 ~
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,	// 16 * 1 ~
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 	// 16 * 2 ~
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 	// 16 * 3 ~
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,	// 16 * 4 ~
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,	// 16 * 5 ~
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,	// 16 * 6 ~
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,	// 16 * 7 ~
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,	// 16 * 8 ~
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,	// 16 * 9 ~
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,	// 16 * 10 ~
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,	// 16 * 11 ~
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,	// 16 * 12 ~
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,	// 16 * 13 ~
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,	// 16 * 14 ~
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7	// 16 * 15 ~
};

